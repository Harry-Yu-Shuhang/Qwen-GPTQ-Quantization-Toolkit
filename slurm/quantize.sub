#!/bin/bash
#SBATCH --partition=debug
#SBATCH --job-name=qwen_gptq
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --gpus-per-node=1
#SBATCH --cpus-per-task=8
#SBATCH --time=4:00:00
#SBATCH --mem=32G
#SBATCH --output=logs/qwen2.5-32b-instruct/output_qwen_gptq.log
#SBATCH --error=logs/qwen2.5-32b-instruct/error_qwen_gptq.log

set -eEuo pipefail
trap 'echo "❌ 任务失败: 行号 $LINENO，退出码 $?" >&2; exit 1' ERR

echo "🔍 作业开始: $(date)"
echo "📂 当前目录: $(pwd)"
cd "$SLURM_SUBMIT_DIR"

# ===== 模块加载（AISurrey）=====
if [ -f /etc/profile.d/modules.sh ]; then
    source /etc/profile.d/modules.sh
    module load apptainer || echo "⚠️ Apptainer 模块加载失败，确保已安装"
fi

# ===== 设置缓存路径（避免 /tmp 空间不足）=====
export APPTAINER_TMPDIR="/mnt/fast/nobackup/scratch4weeks/ly0008/ysh/apptainer_tmp"
export APPTAINER_CACHEDIR="/mnt/fast/nobackup/scratch4weeks/ly0008/ysh/apptainer_cache"
mkdir -p "$APPTAINER_TMPDIR" "$APPTAINER_CACHEDIR"

# ===== 项目与容器定义 =====
WORKDIR="$SLURM_SUBMIT_DIR"
DEF_FILE="$WORKDIR/build_GPTQModel/apptainer.def"
SIF_FILE="$WORKDIR/build_GPTQModel/qwen-gptq.sif"

# ===== 模型路径与配置 =====
MODEL_ID="Qwen/Qwen2.5-32B-Instruct"
CONFIG="$WORKDIR/configs/qwen_32b_gptq.yaml"
OUTPUT_DIR="$WORKDIR/quantized_models/qwen-32b-gptq-v2"
CACHE_DIR="$WORKDIR/original_models"
mkdir -p "$OUTPUT_DIR" "$CACHE_DIR"

# ===== 构建容器（如必要）=====
if [ ! -f "$SIF_FILE" ] || [ "$DEF_FILE" -nt "$SIF_FILE" ]; then
    echo "📦 开始构建容器镜像..."

    TMP_SIF="/tmp/qwen-gptq-${SLURM_JOB_ID}.sif"
    echo "📦 构建到临时路径: $TMP_SIF"
    
    apptainer build "$TMP_SIF" "$DEF_FILE"

    mv "$TMP_SIF" "$SIF_FILE"
    echo "✅ 容器构建完成并移动到: $SIF_FILE"
else
    echo "✅ 容器镜像已是最新: $SIF_FILE"
fi

# ===== 容器健康检查 =====
echo "🩺 开始容器健康检查..."
apptainer exec --nv "$SIF_FILE" python -c \
"import torch; print(f'PyTorch 版本: {torch.__version__}, CUDA 可用: {torch.cuda.is_available()}')"

# ===== 启动量化任务 =====
echo "🚀 启动 GPTQ 量化任务..."
apptainer exec --nv \
    --bind "$WORKDIR:/opt/project" \
    --bind "$CACHE_DIR:/hf_cache" \
    "$SIF_FILE" \
    python /opt/quantize.py \
        --model_id "$MODEL_ID" \
        --output_dir "$OUTPUT_DIR" \
        --config "$CONFIG" \
        --cache_dir /hf_cache

# ===== 完成标记 =====
echo "✅ 作业完成: $(date)"
touch "$OUTPUT_DIR/COMPLETED"
